import sys, time, os, logging, random, re, html, xml.etree.ElementTree as ET

missing = []
for m in ("pyperclip", "keyboard", "requests", "openpyxl"):
    try: __import__(m)
    except ModuleNotFoundError: missing.append(m)
if missing:
    print("Brakuje bibliotek ‚Üí pip install", " ".join(missing)); sys.exit(1)
import pyperclip, keyboard, requests
from openpyxl import load_workbook, Workbook

BASE_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))
excel_path = os.path.join(BASE_DIR, "czerwone.xlsx")
log_path   = os.path.join(BASE_DIR, "log.txt")
debug_clip = os.path.join(BASE_DIR, "clipboard_debug.txt")

logging.basicConfig(filename=log_path, filemode="a",
                    level=logging.DEBUG,
                    format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

def ensure_excel(path):
    if not os.path.exists(path):
        wb = Workbook(); wb.active.append(["NIP","Numer","KolumnaC","Data","Uslugi"]); wb.save(path)
        print("üÜï Utworzono", os.path.basename(path))

# --- API GUS --------------------------------------------------------------------
GUS_API_KEY = "bf96e683d9a9449b8958"

class GUSConnector:
    def __init__(self, api_key: str = GUS_API_KEY):
        self.api_key = api_key
        self.session = requests.Session()
        self.url = "https://wyszukiwarkaregon.stat.gov.pl/wsBIR/UslugaBIRzewnPubl.svc"
        self.session.headers.update({"Content-Type": "application/soap+xml;charset=UTF-8"})
        self.sid = None

    def login(self) -> bool:
        envelope = (
            '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" '
            'xmlns:ns="http://CIS/BIR/PUBL/2014/07" '
            'xmlns:wsa="http://www.w3.org/2005/08/addressing">'
            '<soap:Header>'
            '<wsa:Action>http://CIS/BIR/PUBL/2014/07/IUslugaBIRzewnPubl/Zaloguj</wsa:Action>'
            f'<wsa:To>{self.url}</wsa:To>'
            '</soap:Header>'
            '<soap:Body>'
            '<ns:Zaloguj>'
            f'<ns:pKluczUzytkownika>{self.api_key}</ns:pKluczUzytkownika>'
            '</ns:Zaloguj>'
            '</soap:Body>'
            '</soap:Envelope>'
        )
        try:
            resp = self.session.post(self.url, data=envelope, timeout=5)
            if resp.status_code == 200:
                m = re.search(r"<ZalogujResult>([^<]+)</ZalogujResult>", resp.text)
                if m:
                    self.sid = m.group(1)
                    self.session.headers.update({"sid": self.sid})
                    return True
            logger.error("API GUS: nieudane logowanie (status %s)", resp.status_code)
        except Exception as e:
            logger.error("API GUS: %s", e)
        return False

    def search_by_nip(self, nip: str):
        envelope = (
            '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" '
            'xmlns:ns="http://CIS/BIR/PUBL/2014/07" '
            'xmlns:wsa="http://www.w3.org/2005/08/addressing" '
            'xmlns:dat="http://CIS/BIR/PUBL/2014/07/DataContract">'
            '<soap:Header>'
            '<wsa:Action>http://CIS/BIR/PUBL/2014/07/IUslugaBIRzewnPubl/DaneSzukajPodmioty</wsa:Action>'
            f'<wsa:To>{self.url}</wsa:To>'
            '</soap:Header>'
            '<soap:Body>'
            '<ns:DaneSzukajPodmioty>'
            '<ns:pParametryWyszukiwania>'
            f'<dat:Nip>{nip}</dat:Nip>'
            '</ns:pParametryWyszukiwania>'
            '</ns:DaneSzukajPodmioty>'
            '</soap:Body>'
            '</soap:Envelope>'
        )
        try:
            resp = self.session.post(self.url, data=envelope, timeout=5)
            text = resp.text if resp.status_code == 200 else ""
            if "<Fault" in text or "<faultcode>" in text:
                if not self.login():
                    return None
                resp = self.session.post(self.url, data=envelope, timeout=5)
                text = resp.text if resp.status_code == 200 else ""
            if not text:
                return None

            m = re.search(r"<DaneSzukajPodmiotyResult>(.*?)</DaneSzukajPodmiotyResult>",
                          text, flags=re.DOTALL)
            if not m:
                return None

            inner_xml = html.unescape(m.group(1)).strip()
            if not inner_xml:
                return None
            root = ET.fromstring(f"<root>{inner_xml}</root>")
            dane = root.find(".//dane")
            if dane is None:
                return None

            name = dane.findtext("Nazwa") or ""
            data_zak = dane.findtext("DataZakonczeniaDzialalnosci")
            data_zaw = dane.findtext("DataZawieszeniaDzialalnosci")
            data_wzn = dane.findtext("DataWznowieniaDzialalnosci")
            data_skr = dane.findtext("DataSkresleniaZRegon")

            # Debug - mo≈ºesz usunƒÖƒá te printy po testach
            print(f"NIP: {nip}, Nazwa: {name}")
            print(f"  DataZawieszeniaDzialalnosci: {data_zaw}")
            print(f"  DataWznowieniaDzialalnosci: {data_wzn}")
            print(f"  DataZakonczeniaDzialalnosci: {data_zak}")
            print(f"  DataSkresleniaZRegon: {data_skr}")

            aktywna = True

            # Skre≈õlenie z REGON ‚Üí nieaktywna
            if data_skr:
                aktywna = False
            # Zako≈Ñczenie dzia≈Çalno≈õci ‚Äì nieaktywna, chyba ≈ºe po zako≈Ñczeniu by≈Ça wznowiona dzia≈Çalno≈õƒá
            elif data_zak:
                if not data_wzn or (data_wzn <= data_zak):
                    aktywna = False
            # Zawieszenie dzia≈Çalno≈õci bez wznowienia ‚Äì nieaktywna
            elif data_zaw and (not data_wzn or data_wzn <= data_zaw):
                aktywna = False

            return {"Nazwa": name, "Aktywna": aktywna}
        except Exception as e:
            logger.error("API GUS: %s", e)
            return None

def extract_client_data(text: str, gus: GUSConnector):
    out = []
    blocks = re.split(r"Wszystkich kont:\s*\d+", text, flags=re.I)
    nip_re = r"(?<=Poka≈º[\s\t])\d{10}"
    for blk in blocks:
        if re.search(r"tagi[^\n\r]*(db|zs)", blk, re.I): continue
        m = re.search(nip_re, blk, re.I);     nip = m.group() if m else None
        if not nip: continue
        d = gus.search_by_nip(nip)
        if not d or not d["Aktywna"]: continue
        total = sum(map(int, re.findall(r"0 z (\d+)", blk)))
        nums  = re.findall(r"(48\d{9})", blk)
        if not nums: continue
        numer = random.choice([n for n in nums if n.startswith("485")] or nums)[2:]
        date  = (re.findall(r"do (\d{2}-\d{2}-\d{4})", blk) or [""])[0]
        out.append([nip, numer, "", date, total])
    return out

def insert_rows(rows):
    try:
        wb = load_workbook(excel_path); sh = wb.active
        for r in rows: sh.append(r)
        wb.save(excel_path)
        print(f"‚úÖ Dopisano {len(rows)} rekord(y).")
    except Exception as e:
        print("‚ùå B≈ÇƒÖd Excela:", e); logger.error("Excel: %s", e)

def monitor_clipboard(gus: GUSConnector):
    prev = ""
    print("üìã Monitoring schowka‚Ä¶ (Ctrl+C).")
    while True:
        try:
            if keyboard.is_pressed("ctrl+c"):
                time.sleep(.5)
                clip = pyperclip.paste()
                if len(clip.strip()) < 20 or clip == prev: continue
                prev = clip
                with open(debug_clip, "w", encoding="utf-8") as f: f.write(clip)
                rows = extract_client_data(clip, gus)
                if rows: insert_rows(rows)
                else:    print("‚ö†Ô∏è  Brak aktywnych firm w tym tek≈õcie.")
            time.sleep(.1)
        except Exception as e:
            logger.critical("Monitor: %s", e); print("‚ùå", e)

if __name__ == "__main__":
    ensure_excel(excel_path)
    print("üìÅ Plik Excel:", excel_path)
    gus = GUSConnector()
    if gus.login():
        print("‚úÖ Po≈ÇƒÖczono z API GUS."); monitor_clipboard(gus)
    else:
        print("‚ùå Nie uda≈Ço siƒô po≈ÇƒÖczyƒá z API GUS.")
